Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

     Ans: The Profiler capture the total time spent in a method in all thread instead each of the thread.
          The profiler sums up all the time taken by the parse method in all threads.

-----------------------------------------------------------------------------------------------------------------------
Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

    (a) Ans: When apply parallel webcrawler on an old computer, because it has multiple threads, it will cost more
             resource using parallel crawler than using a sequential crawler because it only has one thread.

    (b) Ans: On multi-core computer, the parallel web crawler will perform better than sequential web crawler.

-----------------------------------------------------------------------------------------------------------------------

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    (b) What are the join points of the Profiler in the web crawler program?

    (a) Ans: It was able to evaluate the performance of each method.

    (b) Ans: Invoke method with @Profiled annotation.

------------------------------------------------------------------------------------------------------------------------

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    Ans:
    Proxy Pattern: It was used in "ProfilerImpl" and "ProfilingMethodInterceptor"
    Pros: Use a single class and a single method to serve multiple method calls.
    Cons: It wasn't an easy concept to understand compare to other concept in Java.

    Builder Pattern: It was used in "CrawlerConfiguration"
    Pros: It helps build object step by step, which is easier for people to understand and code are
    generally more readable.
    Cons: When the object become large, it could cause unexpected complexity.

    Dependency Injection Pattern: It was used in "WebCrawlerMain"
    Pros: I think it's helpful when we need to use code from another class, use import and dependency injection make
    it easier to work with.
    Cons: But sometimes the class/dependency in different directory or from a different project make it hard to import
